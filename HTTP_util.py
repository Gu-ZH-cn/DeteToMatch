from http.client import responses

import requests
import json
import unittest
import numpy as np
from unittest.mock import patch

def convert_to_serializable(obj):
    if isinstance(obj, np.float32):
        return float(obj)
    elif isinstance(obj, list):
        return [convert_to_serializable(item) for item in obj]
    elif isinstance(obj, dict):
        return {key: convert_to_serializable(value) for key, value in obj.items()}
    else:
        return obj

def send_post(url, data, customerCode, storeCode):
    '''
    以POTS请求方式将检测结果和一些配置类Code以json字符串格式发送
    :param url: 服务端地址
    :param data: （dict数据类型）检测结果对象
    :param customerCode: 由配置文件定义的customerCode，随时可以更换
    :param storeCode: 由配置文件定义的storeCode，随时可以更换
    :return: :class:`Response <Response>` 由匹配端传输过来的响应结果确认信息（HTTP状态码）
    :rtype: requests.Response
    '''

    url = url + '/genai/goods/prevention'

    # add 'the code' in configuration to the detection json result
    code = {"customerCode":customerCode,"storeCode":storeCode}
    data.update(code)
    content = json.dumps(convert_to_serializable(data))

    headers = {'Content-Type': 'application/json'}
    response = requests.post(url, data=content, headers=headers, timeout=10, allow_redirects=False)
    print(response)
    return response

# 单元测试案例
# class TestSendPost(unittest.TestCase):
#     @patch('requests.post')
#     def test_send_post(self, mock_post):
#         '''
#         该测试用例需要首先使用app.py启动flask服务器，再进行测试访问
#         '''
#         # 设置mock返回值
#         mock_response = requests.Response()
#         mock_response.status_code = 200
#         mock_response._content = b'{"success": true}'
#         mock_post.return_value = mock_response
#         mock_request = {"goodsInfo": [{'ean': ['8993175550222', '8993175537469', '8993175540735', '6924743915763', '8993175548809'], 'prob': [0.07762474, 0.39752156, 0.77783304, 0.86809427, 0.92702657]}, {'ean': ['8993175540735', '8993175537469', '6924743915763', '8993175550222', '8993175549721'], 'prob': [0.34016544, 0.64313877, 0.6621524, 0.7355257, 0.84516585]}, {'ean': ['6924743915763', '8993175540735', '8993175537469', '6924743915848', '6924743915770'], 'prob': [0.3735652, 0.4223771, 0.6278342, 0.6777916, 0.8030168]}, {'ean': ['6901845042764', '6901845045079', '6901845041804', '8993175540735', '6924743915763'], 'prob': [0.20223427, 0.48906875, 0.85174227, 0.8571202, 0.918671]}, {'ean': ['8993175540735', '6924743915763', '8993175537469', '8993175548809', '8993175550222'], 'prob': [0.2514339, 0.5321181, 0.67339003, 0.8547445, 0.8915473]}, {'ean': ['6901845041804', '6901845045079', '6924743915848', '6925303770563', '6901845042764'], 'prob': [0.31737876, 0.6375113, 0.73338866, 0.7386985, 0.7501434]}, {'ean': ['8993175537469', '8993175550222', '8993175540735', '8993175548809', '6924743915763'], 'prob': [0.18107748, 0.338665, 0.5712291, 0.7799296, 0.9286778]}, {'ean': ['6901845041491', '6924743915848'], 'prob': [0.24351943, 0.86353564]}, {'ean': ['8993175548809', '8993175537469', '8993175540735', '8993175550222', '6901845045079'], 'prob': [0.31435037, 0.75833666, 0.7597555, 0.84830606, 0.87307847]}, {'ean': ['8993175549721', '6901845041804', '8993175548809', '8993175540735'], 'prob': [0.15244079, 0.8692771, 0.9230994, 0.93540835]}, {'ean': ['6924743915770', '8993175548809', '6925303792978', '6924743915848'], 'prob': [0.3145784, 0.80255353, 0.88582295, 0.90953225]}, {'ean': ['6925303792978', '6924743915770', '8993175548809', '6925303770563', '6901845042764'], 'prob': [0.77074945, 0.7738526, 0.8082832, 0.85057557, 0.86731386]}, {'ean': ['6925303770563', '8993175550222', '6924743915848', '6901845041804'], 'prob': [0.57885206, 0.9149293, 0.9378104, 0.97277915]}, {'ean': ['6924743915848', '6924743915770', '8993175550222', '6901845041804', '6925303770563'], 'prob': [0.38185024, 0.8641012, 0.9014605, 0.9399389, 0.95276916]}, {'ean': ['6901845045079', '6901845042764', '8993175540735', '6924743915770'], 'prob': [0.39218974, 0.54294837, 0.8654295, 0.94795895]}, {'ean': ['6925303791155', '8993175549721', '6901845042764'], 'prob': [0.756051, 0.96619856, 0.985862]}],
#                         "customerCode": "genai",
#                         "storeCode": "beijing"
#                         }
#         mock_json = json.dumps(mock_request)
#
#         '''测试案例使用如下'''
#         # 测试数据
#         ## 测试地址URL
#         url = 'http://20.191.90.43:8585'
#         ## （以字典对象形式存储）检测模型的检测结果
#         data = {'goodsInfo': [{'ean': ['8993175550222', '8993175537469', '8993175540735', '6924743915763', '8993175548809'], 'prob': [0.07762474, 0.39752156, 0.77783304, 0.86809427, 0.92702657]}, {'ean': ['8993175540735', '8993175537469', '6924743915763', '8993175550222', '8993175549721'], 'prob': [0.34016544, 0.64313877, 0.6621524, 0.7355257, 0.84516585]}, {'ean': ['6924743915763', '8993175540735', '8993175537469', '6924743915848', '6924743915770'], 'prob': [0.3735652, 0.4223771, 0.6278342, 0.6777916, 0.8030168]}, {'ean': ['6901845042764', '6901845045079', '6901845041804', '8993175540735', '6924743915763'], 'prob': [0.20223427, 0.48906875, 0.85174227, 0.8571202, 0.918671]}, {'ean': ['8993175540735', '6924743915763', '8993175537469', '8993175548809', '8993175550222'], 'prob': [0.2514339, 0.5321181, 0.67339003, 0.8547445, 0.8915473]}, {'ean': ['6901845041804', '6901845045079', '6924743915848', '6925303770563', '6901845042764'], 'prob': [0.31737876, 0.6375113, 0.73338866, 0.7386985, 0.7501434]}, {'ean': ['8993175537469', '8993175550222', '8993175540735', '8993175548809', '6924743915763'], 'prob': [0.18107748, 0.338665, 0.5712291, 0.7799296, 0.9286778]}, {'ean': ['6901845041491', '6924743915848'], 'prob': [0.24351943, 0.86353564]}, {'ean': ['8993175548809', '8993175537469', '8993175540735', '8993175550222', '6901845045079'], 'prob': [0.31435037, 0.75833666, 0.7597555, 0.84830606, 0.87307847]}, {'ean': ['8993175549721', '6901845041804', '8993175548809', '8993175540735'], 'prob': [0.15244079, 0.8692771, 0.9230994, 0.93540835]}, {'ean': ['6924743915770', '8993175548809', '6925303792978', '6924743915848'], 'prob': [0.3145784, 0.80255353, 0.88582295, 0.90953225]}, {'ean': ['6925303792978', '6924743915770', '8993175548809', '6925303770563', '6901845042764'], 'prob': [0.77074945, 0.7738526, 0.8082832, 0.85057557, 0.86731386]}, {'ean': ['6925303770563', '8993175550222', '6924743915848', '6901845041804'], 'prob': [0.57885206, 0.9149293, 0.9378104, 0.97277915]}, {'ean': ['6924743915848', '6924743915770', '8993175550222', '6901845041804', '6925303770563'], 'prob': [0.38185024, 0.8641012, 0.9014605, 0.9399389, 0.95276916]}, {'ean': ['6901845045079', '6901845042764', '8993175540735', '6924743915770'], 'prob': [0.39218974, 0.54294837, 0.8654295, 0.94795895]}, {'ean': ['6925303791155', '8993175549721', '6901845042764'], 'prob': [0.756051, 0.96619856, 0.985862]}]}
#         ## 配置好的一些Code
#         customerCode = 'genai'
#         storeCode = 'beijing'
#
#         # 调用函数
#         response = send_post(url, data, customerCode, storeCode)
#
#         # 验证请求是否正确
#         mock_post.assert_called_once_with(
#             url + '/genai/goods/prevention',
#             json= mock_json,
#             headers={'Content-Type': 'application/json'},
#             timeout=10,
#             allow_redirects=False
#         )
#
#         # 验证响应
#         self.assertEqual(response.status_code, 200)
#         self.assertEqual(response.content, b'{"success": true}')
#
# if __name__ == '__main__':
#     unittest.main()
if __name__ == '__main__':
    url = 'http://20.191.90.43:8585'
    data = {'GoodsInfo': [{'ean': ['8993175550222', '8993175537469', '8993175540735', '6924743915763', '8993175548809'], 'prob': [0.07762474, 0.39752156, 0.77783304, 0.86809427, 0.92702657]}, {'ean': ['8993175540735', '8993175537469', '6924743915763', '8993175550222', '8993175549721'], 'prob': [0.34016544, 0.64313877, 0.6621524, 0.7355257, 0.84516585]}, {'ean': ['6924743915763', '8993175540735', '8993175537469', '6924743915848', '6924743915770'], 'prob': [0.3735652, 0.4223771, 0.6278342, 0.6777916, 0.8030168]}, {'ean': ['6901845042764', '6901845045079', '6901845041804', '8993175540735', '6924743915763'], 'prob': [0.20223427, 0.48906875, 0.85174227, 0.8571202, 0.918671]}, {'ean': ['8993175540735', '6924743915763', '8993175537469', '8993175548809', '8993175550222'], 'prob': [0.2514339, 0.5321181, 0.67339003, 0.8547445, 0.8915473]}, {'ean': ['6901845041804', '6901845045079', '6924743915848', '6925303770563', '6901845042764'], 'prob': [0.31737876, 0.6375113, 0.73338866, 0.7386985, 0.7501434]}, {'ean': ['8993175537469', '8993175550222', '8993175540735', '8993175548809', '6924743915763'], 'prob': [0.18107748, 0.338665, 0.5712291, 0.7799296, 0.9286778]}, {'ean': ['6901845041491', '6924743915848'], 'prob': [0.24351943, 0.86353564]}, {'ean': ['8993175548809', '8993175537469', '8993175540735', '8993175550222', '6901845045079'], 'prob': [0.31435037, 0.75833666, 0.7597555, 0.84830606, 0.87307847]}, {'ean': ['8993175549721', '6901845041804', '8993175548809', '8993175540735'], 'prob': [0.15244079, 0.8692771, 0.9230994, 0.93540835]}, {'ean': ['6924743915770', '8993175548809', '6925303792978', '6924743915848'], 'prob': [0.3145784, 0.80255353, 0.88582295, 0.90953225]}, {'ean': ['6925303792978', '6924743915770', '8993175548809', '6925303770563', '6901845042764'], 'prob': [0.77074945, 0.7738526, 0.8082832, 0.85057557, 0.86731386]}, {'ean': ['6925303770563', '8993175550222', '6924743915848', '6901845041804'], 'prob': [0.57885206, 0.9149293, 0.9378104, 0.97277915]}, {'ean': ['6924743915848', '6924743915770', '8993175550222', '6901845041804', '6925303770563'], 'prob': [0.38185024, 0.8641012, 0.9014605, 0.9399389, 0.95276916]}, {'ean': ['6901845045079', '6901845042764', '8993175540735', '6924743915770'], 'prob': [0.39218974, 0.54294837, 0.8654295, 0.94795895]}, {'ean': ['6925303791155', '8993175549721', '6901845042764'], 'prob': [0.756051, 0.96619856, 0.985862]}]}
    #         ## 配置好的一些Code
    customerCode = 'genai'
    storeCode = 'beijing'
    responses = send_post(url, data, customerCode, storeCode)
    print(responses)